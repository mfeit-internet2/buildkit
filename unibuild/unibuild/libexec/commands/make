#!/bin/sh -e
#
# make - Run target(s) for all packages.
#

. "$(dirname $0)/../common"

help()
{
    cat <<EOF
Usage: ${WHOAMI} [ OPTIONS ] [ TARGET [ TARGET ... ] ]

Where TARGETs are a list of make targets to build.  No no targets are
specified, the default target will be built.

OPTIONS:

  --dry      Do a dry run
  --file F   Get order from file F instead of unibuild-order
  --reverse  Operate in reverse order
  --start P  Start with package P

EOF
}


BUNDLE=
DRY=
[ -t 0 ] \
    && FILE=unibuild-order \
    || FILE=""
REVERSE=cat
START=


while [ "$1" ]
do
    case "$1" in

	--bundle)
	    BUNDLE="$2"
	    shift
	    shift
	    ;;

	--dry)
	    DRY=echo
	    shift
	    ;;

	--file)
	    FILE="$2"
	    shift
	    shift
	    ;;

	--start)
	    START="$2"
	    shift
	    shift
	    ;;

	--reverse)
	    REVERSE=reverse
	    shift
	    ;;

	--help)
	    help
	    exit 0
	    ;;

	--*)
	    die "Unknown option '$1'"
	    ;;

	*)
	    break
	    ;;
    esac
done

# Reverse the order of lines in a file.  This emulates tac(1) in a
# POSIX-y way.  Source:
# http://web.archive.org/web/20090204080114/http://student.northpark.edu/pemente/sed/sed1line.txt
reverse()
{
    sed '1!G;h;$!d'
}

cat ${FILE} \
    | build_order "${BUNDLE}" \
    | ${REVERSE} \
    | ([ -n "${START}" ] && sed -n "/^${START}\$/,\$p" || cat) \
    | while read PACKAGE
do

    if ! (find "${PACKAGE}" -type d | egrep -qe "/unibuild-packaging/${OSINFO_PACKAGING}\$")
    then
	section SKIPPING ${PACKAGE}:  No ${OSINFO_PACKAGING} build
	continue
    fi

    [ $# -eq 0 ] \
	&& section BUILDING ${PACKAGE} \
	|| section BUILDING ${PACKAGE}: make $@
    [ -d "${PACKAGE}" ] \
	&& ${DRY} make -C "${PACKAGE}" "$@" \
	|| die "\n${PACKAGE}: No such directory\n"
done

exit 0
